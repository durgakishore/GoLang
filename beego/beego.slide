Beego - The Missing Manual
A Go framework for developing HTTP application rapidly
15:00 28 Mar 2014
Tags: foo, bar, baz

Lei Cao
http://github.com/lei-cao

* Overview

It is inspired by tornado, sinatra and flask.


Why it's called http framework other than web framework?

The reason is *beego* suits for any kinds of http services: api services, web backend, game development etc.

* beego's Key Features

- High performance. The fastest Go framework out there now.
- Rapid development, lots of components, highly decoupled
- Tons of products. 360，weico，jd，opera ...
- RESTful model with customizable actions
- high stability, frequent update, continuous maintainace
- Good documents, online FAQ

* Quick Start

.link http://127.0.0.1:8080

.play quick.go

* bee as the scaffolding for developing beego projects

    go get github.com/beego/bee


    new         create an application base on beego framework
    run         run the app which can hot compile
    pack        compress an beego project
    api         create an api application base on beego framework
    router      auto-generate routers for the app controllers
    test        test the app
    bale        packs non-Go files to Go source files


*  `bee new` to create a web project

Beego project Structue 

  cd $GOPATH/src
  bee new app
  app
  ├── conf
  │   └── app.conf
  ├── routers
  │   └── router.go
  ├── controllers
  │   └── default.go
  └── views
      └── index.tpl
  ├── models
  ├── static
  ├── tests
  │   └── default_test.go
  ├── main.go


* `bee run` to run, watch and auto build project
Config file bee.json can suit for any Go project such as martini project

  $ bee run
  14-03-26 02:09:58 [INFO] Uses 'app' as 'appname'
  14-03-26 02:09:58 [INFO] Initializing watcher...
  14-03-26 02:09:58 [TRAC] Directory(/project/qiniu/beego/src/app/controllers)
  14-03-26 02:09:58 [TRAC] Directory(/project/qiniu/beego/src/app/models)
  14-03-26 02:09:58 [TRAC] Directory(/project/qiniu/beego/src/app)
  14-03-26 02:09:58 [INFO] Start building...
  14-03-26 02:10:01 [SUCC] Build was successful
  14-03-26 02:10:01 [INFO] Restarting app ...
  14-03-26 02:10:01 [INFO] ./app is running...
  2014/03/26 02:10:01 [I] Running on :8080




* Beego architecture

* Congifuration

Reading ini config from conf/app.conf by default

  httpaddr = "127.0.0.1"
  httpport = 9090
  runmode ="dev"
 
  beego.AppConfig.String("runmode")

Independent from AppConfig, Beego's config can be overwrite completely.

  beego.HttpAddr = "127.0.0.1"
  beego.HttpPort = "9080"
  beego.RunMode = "prod"

Beego's configurations can be set by beego.xxx

* Router

Based on Go's net/http

As similar as http, the router configuration is defined in go file so the router can be dynamic.

.image router.jpg

* 

- Fixed routers

I.E. fully matched router. Mapping to action based on the requested method name. It's a typical RESTful pattern.

  beego.Router("/admin", &admin.UserController{})

- Regex routers

Similar as *sinatra*'s regex

  beego.Router(“/news/:all”, &controllers.RController{})
  this.Ctx.Input.Param(":all")

  beego.Router(“/api/:id([0-9]+)“, &controllers.RController{})
  this.Ctx.Input.Param(":id")
  
  beego.Router(“/download/*.*”, &controllers.RController{})
  this.Ctx.Input.Param(":path")
  this.Ctx.Input.Param(":ext")

  beego.Router(“/download/ceshi/*“, &controllers.RController{})
  this.Ctx.Input.Param(":splat")

* 

- Automatic routers

Mapping to controller based on the requested controller name and action name.

  beego.AutoRouter(&controllers.ObjectController{})

  /object/login   Will map to Login method of ObjectController
  /object/logout  Will map to Logout method of ObjectController


- Customized routers

  beego.Router("/api/list",&RestController{},"*:ListFood")
  beego.Router("/api/create",&RestController{},"post:CreateFood")
  beego.Router("/api/update",&RestController{},"put:UpdateFood")
  beego.Router("/api/delete",&RestController{},"delete:DeleteFood")

* 

- Group routers

Mapping URL

- /admin/login
- /admin/logout
- /admin/register

  GR := beego.NewGroupRouters{}
  GR.AddRouter("/login", &AuthControllers{}, "get:Login")
  GR.AddRouter("/logout", &AuthControllers{}, "get:Logout")
  GR.AddRouter("/register", &AuthControllers{}, "get:Register")

  beego.AddGroupRouter("/admin", GR)
  beego.Run()

* Controller

Standard RESTFul action by default: Get Post Delete Put Head Patch Options

As well as customized action

.image controller.jpg

* 

Typical usage

- Accessing Request and Response by Controller.Ctx

  type BaseController struct {
      beego.Controller
  }

  func (this *BaseController) Post() {
      // get request data: get / post
      value := this.GetString("name")
      // return json data
      this.Data["json"] = map[string]string{
          "success": true,
          "data": value,
      }
      this.ServeJson()
  }

* Filter

Hook system

- BeforeRouter Before mapping router
- AfterStatic After rendering static
- BeforeExec After mapping router, before mapped Controller
- AfterExec After executing Controller
- FinishRouter After finishing router

  var FilterUser = func(ctx *context.Context) {
      _, ok := ctx.Input.Session("uid").(int)
      if !ok && ctx.Request.RequestURI != "/login" {
          ctx.Redirect(302, "/login")
      }
  }

  beego.AddFilter("*","AfterStatic",FilterUser)

* Template

Using Go's native template engine: html/template

  beego.ViewsPath = "views" // default template path is views

Using ViewsPath/ControllerName/method.tpl as default template file

- Supporting standard layout mode
- Supporting LayoutSection

  func (this *IndexController) Get() {
      // Assigning template variable
      this.Data["content"] = "value"

      // Specifying template
      this.TplNames = "index.html"
  }

* 

Untypical usage

base.html

    <!DOCTYPE html>
    <html>
    <head>
        {{template "base/head.html" .}}
        {{template "head" .}}
    </head>
    <body id="front">
        <div id="wrapper">
            {{template "header" .}}
            <div id="main" class="container">
                {{template "body" .}}
            </div>
        </div>
        {{template "footer" .}}
    </body>
    </html>

* 

common.html

    {{define "head"}}{{end}}
    {{define "header"}}
        {{template "base/navbar.html" .}}
    {{end}}
    {{define "footer"}}
        {{template "base/foot.html" .}}
    {{end}}

index.html

    {{template "base.html" .}}
    {{template "common.html" .}}
    {{define "meta"}}{{end}}
    {{define "title"}}title{{end}}
    {{define "body"}}
        body content
    {{end}}

* Test

Run testcases without running server

- Supporting `go test`
- Supporting `goconvey`
- Supporting all the other unit test methods

* Modular Beego

Based on eight modules

Highly decoupled. Formed by modulars which can be used separately.

- context
- config
- logs
- session
- cache
- httplib
- toolbox
- orm

* Context

The Context module for HTTP request.

The key modules

Input: get input data. Implemented many useful methods by `Request`

  Query，Cookie，Ip，Refer，Header，Session，IsWebsocket...

Output: The encapsulation for `Response`

  Header，Body，Cookie，Json，Jsonp，Xml，Download...

Usage: The `Ctx` encapsulated in `Controller` is `*context.Context` object

  type Some struct {
      beego.Controller
  }
  func (this *Some) Get() {
      name := this.Ctx.Query("name")
  ...

* Config

Supporting different kinds of config files: ini, json, xml, yaml

Beego framework is using Config, but all the config parameters can be controled easily

eg:

  iniconf, err := NewConfig("ini", "testini.conf")
  if err != nil {
      t.Fatal(err)
  }

Get the configs of some section

  [demo]
  port = 80

  iniconf.Int("demo::port")

* Logs

Supporting different kinds of logs: console, conn, file, smtp

.play logs.go

* Session / Cache

Supporting different kinds of `Session` engine:

  memory, memcache, cookie, couchbase, file, redis, mysql, postgres

After `Session` enabled:

  this.GetSession(key)
  this.SetSession(key, value)

Supporting different kinds of `Cache`

  memory, memcache, redis, file

Using `Gob` for encoding and decoding internally

* httplib

Used to simulate client to send out *HTTP* requests.

.play httplib.go

* 

Supported object methods:

`httplib` package supports these methods to return `request` object

Get(url string)
Post(url string)
Put(url string)
Delete(url string)
Head(url string)

- Supporting debug output
- Supporting HTTPS request
- Supporting timeout
- Supporting request parameters
- Supporting file uploading

* toolbox

Inspired by Dropwizard framework

 // bind 127.0.0.1:8088 by default
 beego.EnableAdmin = true

- Safety check
- Performance optimize
- Visits statistics
- Scheduled tasks

* 

healthcheck

  type DatabaseCheck struct {
  }

  func (dc *DatabaseCheck) Check() error {
      if dc.isConnected() {
          return nil
      } else {
          return errors.New("can't connect database")
      }
  }

Adding check items by `AddHealthCheck`:

  toolbox.AddHealthCheck("database",&DatabaseCheck{})

  $ curl http://beego.me:8088/healthcheck
  * deadlocks: OK
  * database: OK

* 

profile

Printing out all the `goroutine` status

  lookup goroutine

Printing out current `heap` info

  lookup heap

Printing out threads creating info

  lookup threadcreate

Printing out `block` info

  lookup block

* 

Recording `cpuprof` info

  start cpuprof / stop cpuprof

Recording `memprof` info

  get memprof

Checking `GC` info

  gc summary

* Statistics

.image statics.jpg 200 600

  | requestUrl           | method     | times   | used             | max used         | min used         | avg used         |
  | /api/user            | POST       |  2      | 122.00us         | 120.00us         | 2.00us           | 61.00us          |
  | /api/user            | GET        |  1      | 13.00us          | 13.00us          | 13.00us          | 13.00us          |
  | /api/user            | DELETE     |  1      | 1.40us           | 1.40us           | 1.40us           | 1.40us           |
  | /api/admin           | POST       |  1      | 14.00us          | 14.00us          | 14.00us          | 14.00us          |
  | /api/user/astaxie    | POST       |  1      | 12.00us          | 12.00us          | 12.00us          | 12.00us          |
  | /api/user/xiemengjun | POST       |  1      | 13.00us          | 13.00us          | 13.00us          | 13.00us          |

* 

Showing statistics based on `RequestPath` by default

You can also add status info into dataset manualy.

  toolbox.StatisticsMap.AddStatistics("POST", "/api/user", "&admin.user", time.Duration(2000))
  toolbox.StatisticsMap.AddStatistics("POST", "/api/user", "&admin.user", time.Duration(120000))
  toolbox.StatisticsMap.AddStatistics("GET", "/api/user", "&admin.user", time.Duration(13000))
  toolbox.StatisticsMap.AddStatistics("POST", "/api/admin", "&admin.user", time.Duration(14000))
  toolbox.StatisticsMap.AddStatistics("POST", "/api/user/astaxie", "&admin.user", time.Duration(12000))
  toolbox.StatisticsMap.AddStatistics("POST", "/api/user/xiemengjun", "&admin.user", time.Duration(13000))
  toolbox.StatisticsMap.AddStatistics("DELETE", "/api/user", "&admin.user", time.Duration(1400))

Getting statistics info

  toolbox.StatisticsMap.GetMap(os.Stdout)

* orm

Inspired by *Django ORM* and *SQLAlchemy*

Supported databases and drivers

- MySQL：github.com/go-sql-driver/mysql
- PostgreSQL：github.com/lib/pq
- Sqlite3：github.com/mattn/go-sqlite3

Define model by `struct`

  type User struct {
      Id    int
      Name  string `orm:"size(100)"`
  }

* 

Supporting all the Go's type

  Go's basic type, sql.Null*, customized type such as: `type Int int64`

Using simple *CRUD* style:

  o.Insert(&user)
  o.Read(&user)

Auto creating tables.

Auto *Join* association tables

Crossing databse compatibility check

Can use raw SQL for querying and mapping

Fully coverd test cases to keep the *ORM* stable and robust

.link http://beego.me/docs/mvc/model/overview.md

* And More

* 

Other modules:

- Validation
- Captcha
- Testing
- BasicAuth
- Form (wip)

Even more modules:

- i18n
- wetalk
- social-auth
- beego compress
- beego admin

* Beego vs Others

* Revel

beego can / revel not

- Independent decoupled config that is easy to change
- As similar as http, the router configuration is defined in go file so the router can be dynamic.
- Can be run by compling once
- Different kinds of ways to mapping routers
- Supporting `go test` or `GoConvey`
- Very good `session` and `cache` system
- Running status debugging

revel can / beego not

- `action` method's parameters support static binding

* Martini

beego can / martini not

- No need to define so many parameters in functions.
- No need to remember so many `middleware` type.
- Better performance. *Martini*'s performance will drop down rapidly while `middleware` increasing
- `Martini`'s key modules are maintainanced by one person, it's hard to improve

martini can / beego not

- Inject parameters for function dynamicly. (The reason of reducing performance: `reflect`)
- magic. A cool way to inject pulgins
- Easy for plugin development

* Resource
* 

Beego offical site

.link http://beego.me
.link http://beego.me/docs/intro/
.link https://gowalker.org/github.com/astaxie/beego

Go Advent Day 5 - An introduction to beego

.link http://blog.gopheracademy.com/day-05-beego

QCon 2013 Build high performance API with Beego

.link http://djt.qq.com/ppt/236

Go China blog

.link http://blog.go-china.org

* 

Beego + mgo

.link https://github.com/goinggo/beego-mgo
.link http://www.goinggo.net/2013/12/sample-web-application-using-beego-and.html

* Status

Github Star: 2083 Fork: 578

Keeping on maintaining

Team

- AstaXie

.link http://github.com/astaxie

- Unknown

.link http://github.com/unknwon

- slene

.link http://github.com/slene

* 
.image beegomgo.jpg
